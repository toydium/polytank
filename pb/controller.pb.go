// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorkerInfo_Status int32

const (
	WorkerInfo_UNSPECIFIED WorkerInfo_Status = 0
	WorkerInfo_INITIALIZED WorkerInfo_Status = 1
	WorkerInfo_DISTRIBUTED WorkerInfo_Status = 2
	WorkerInfo_RUNNING     WorkerInfo_Status = 3
	WorkerInfo_SUCCESS     WorkerInfo_Status = 4
	WorkerInfo_FAILURE     WorkerInfo_Status = 5
)

var WorkerInfo_Status_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INITIALIZED",
	2: "DISTRIBUTED",
	3: "RUNNING",
	4: "SUCCESS",
	5: "FAILURE",
}

var WorkerInfo_Status_value = map[string]int32{
	"UNSPECIFIED": 0,
	"INITIALIZED": 1,
	"DISTRIBUTED": 2,
	"RUNNING":     3,
	"SUCCESS":     4,
	"FAILURE":     5,
}

func (x WorkerInfo_Status) String() string {
	return proto.EnumName(WorkerInfo_Status_name, int32(x))
}

func (WorkerInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0, 0}
}

type WorkerInfo struct {
	Uuid                 string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status               WorkerInfo_Status `protobuf:"varint,3,opt,name=status,proto3,enum=pb.WorkerInfo_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkerInfo) Reset()         { *m = WorkerInfo{} }
func (m *WorkerInfo) String() string { return proto.CompactTextString(m) }
func (*WorkerInfo) ProtoMessage()    {}
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

func (m *WorkerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerInfo.Unmarshal(m, b)
}
func (m *WorkerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerInfo.Marshal(b, m, deterministic)
}
func (m *WorkerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerInfo.Merge(m, src)
}
func (m *WorkerInfo) XXX_Size() int {
	return xxx_messageInfo_WorkerInfo.Size(m)
}
func (m *WorkerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerInfo proto.InternalMessageInfo

func (m *WorkerInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *WorkerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WorkerInfo) GetStatus() WorkerInfo_Status {
	if m != nil {
		return m.Status
	}
	return WorkerInfo_UNSPECIFIED
}

type StatusResponse struct {
	Workers              []*WorkerInfo `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetWorkers() []*WorkerInfo {
	if m != nil {
		return m.Workers
	}
	return nil
}

type AddWorkerRequest struct {
	Addresses            []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWorkerRequest) Reset()         { *m = AddWorkerRequest{} }
func (m *AddWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*AddWorkerRequest) ProtoMessage()    {}
func (*AddWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}

func (m *AddWorkerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddWorkerRequest.Unmarshal(m, b)
}
func (m *AddWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddWorkerRequest.Marshal(b, m, deterministic)
}
func (m *AddWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkerRequest.Merge(m, src)
}
func (m *AddWorkerRequest) XXX_Size() int {
	return xxx_messageInfo_AddWorkerRequest.Size(m)
}
func (m *AddWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkerRequest proto.InternalMessageInfo

func (m *AddWorkerRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type AddWorkerResponse struct {
	Workers              []*WorkerInfo `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddWorkerResponse) Reset()         { *m = AddWorkerResponse{} }
func (m *AddWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*AddWorkerResponse) ProtoMessage()    {}
func (*AddWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{3}
}

func (m *AddWorkerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddWorkerResponse.Unmarshal(m, b)
}
func (m *AddWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddWorkerResponse.Marshal(b, m, deterministic)
}
func (m *AddWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkerResponse.Merge(m, src)
}
func (m *AddWorkerResponse) XXX_Size() int {
	return xxx_messageInfo_AddWorkerResponse.Size(m)
}
func (m *AddWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkerResponse proto.InternalMessageInfo

func (m *AddWorkerResponse) GetWorkers() []*WorkerInfo {
	if m != nil {
		return m.Workers
	}
	return nil
}

type DistributeAllResponse struct {
	Workers              []*WorkerInfo `protobuf:"bytes,2,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DistributeAllResponse) Reset()         { *m = DistributeAllResponse{} }
func (m *DistributeAllResponse) String() string { return proto.CompactTextString(m) }
func (*DistributeAllResponse) ProtoMessage()    {}
func (*DistributeAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{4}
}

func (m *DistributeAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributeAllResponse.Unmarshal(m, b)
}
func (m *DistributeAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributeAllResponse.Marshal(b, m, deterministic)
}
func (m *DistributeAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributeAllResponse.Merge(m, src)
}
func (m *DistributeAllResponse) XXX_Size() int {
	return xxx_messageInfo_DistributeAllResponse.Size(m)
}
func (m *DistributeAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributeAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DistributeAllResponse proto.InternalMessageInfo

func (m *DistributeAllResponse) GetWorkers() []*WorkerInfo {
	if m != nil {
		return m.Workers
	}
	return nil
}

type StartResponse struct {
	Workers              []*WorkerInfo `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetWorkers() []*WorkerInfo {
	if m != nil {
		return m.Workers
	}
	return nil
}

type ControllerWaitRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerWaitRequest) Reset()         { *m = ControllerWaitRequest{} }
func (m *ControllerWaitRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerWaitRequest) ProtoMessage()    {}
func (*ControllerWaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{6}
}

func (m *ControllerWaitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerWaitRequest.Unmarshal(m, b)
}
func (m *ControllerWaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerWaitRequest.Marshal(b, m, deterministic)
}
func (m *ControllerWaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerWaitRequest.Merge(m, src)
}
func (m *ControllerWaitRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerWaitRequest.Size(m)
}
func (m *ControllerWaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerWaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerWaitRequest proto.InternalMessageInfo

func (m *ControllerWaitRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type ControllerWaitResponse struct {
	Uuid                 string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	WaitResponse         *WaitResponse `protobuf:"bytes,2,opt,name=wait_response,json=waitResponse,proto3" json:"wait_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ControllerWaitResponse) Reset()         { *m = ControllerWaitResponse{} }
func (m *ControllerWaitResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerWaitResponse) ProtoMessage()    {}
func (*ControllerWaitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{7}
}

func (m *ControllerWaitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerWaitResponse.Unmarshal(m, b)
}
func (m *ControllerWaitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerWaitResponse.Marshal(b, m, deterministic)
}
func (m *ControllerWaitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerWaitResponse.Merge(m, src)
}
func (m *ControllerWaitResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerWaitResponse.Size(m)
}
func (m *ControllerWaitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerWaitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerWaitResponse proto.InternalMessageInfo

func (m *ControllerWaitResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ControllerWaitResponse) GetWaitResponse() *WaitResponse {
	if m != nil {
		return m.WaitResponse
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.WorkerInfo_Status", WorkerInfo_Status_name, WorkerInfo_Status_value)
	proto.RegisterType((*WorkerInfo)(nil), "pb.WorkerInfo")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
	proto.RegisterType((*AddWorkerRequest)(nil), "pb.AddWorkerRequest")
	proto.RegisterType((*AddWorkerResponse)(nil), "pb.AddWorkerResponse")
	proto.RegisterType((*DistributeAllResponse)(nil), "pb.DistributeAllResponse")
	proto.RegisterType((*StartResponse)(nil), "pb.StartResponse")
	proto.RegisterType((*ControllerWaitRequest)(nil), "pb.ControllerWaitRequest")
	proto.RegisterType((*ControllerWaitResponse)(nil), "pb.ControllerWaitResponse")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5d, 0x8b, 0x9b, 0x40,
	0x14, 0xad, 0x49, 0x36, 0x21, 0x37, 0xbb, 0xa9, 0x19, 0x9a, 0x25, 0xb5, 0x7d, 0x08, 0x3e, 0x05,
	0x4a, 0xdd, 0xc5, 0x7e, 0xd0, 0x16, 0x96, 0xc5, 0x46, 0xb7, 0x0c, 0x2c, 0xb2, 0x38, 0x91, 0x85,
	0xbe, 0x14, 0x8d, 0xb3, 0x41, 0x6a, 0x33, 0x56, 0x47, 0xd2, 0xfe, 0xa4, 0xfe, 0x98, 0xfe, 0xa7,
	0xe2, 0xa8, 0x89, 0x09, 0xa6, 0xd0, 0xbe, 0x79, 0xcf, 0x3d, 0xf7, 0x9e, 0xb9, 0x9e, 0x03, 0xf2,
	0x92, 0xad, 0x79, 0xc2, 0xa2, 0x88, 0x26, 0x5a, 0x9c, 0x30, 0xce, 0x50, 0x2b, 0xf6, 0x95, 0x67,
	0x2b, 0xc6, 0x56, 0x11, 0xbd, 0x10, 0x88, 0x9f, 0x3d, 0x5c, 0xd0, 0x6f, 0x31, 0xff, 0x59, 0x10,
	0x94, 0xd3, 0x0d, 0x4b, 0xbe, 0x56, 0x74, 0xf5, 0xb7, 0x04, 0x70, 0x2f, 0x00, 0xbc, 0x7e, 0x60,
	0x08, 0x41, 0x27, 0xcb, 0xc2, 0x60, 0x22, 0x4d, 0xa5, 0x59, 0xdf, 0x11, 0xdf, 0x68, 0x02, 0x3d,
	0x2f, 0x08, 0x12, 0x9a, 0xa6, 0x93, 0x96, 0x80, 0xab, 0x12, 0xbd, 0x84, 0x6e, 0xca, 0x3d, 0x9e,
	0xa5, 0x93, 0xf6, 0x54, 0x9a, 0x0d, 0xf5, 0xb1, 0x16, 0xfb, 0xda, 0x6e, 0x9b, 0x46, 0x44, 0xd3,
	0x29, 0x49, 0xaa, 0x0f, 0xdd, 0x02, 0x41, 0x8f, 0x61, 0xe0, 0xda, 0xe4, 0xce, 0x9a, 0xe3, 0x1b,
	0x6c, 0x99, 0xf2, 0xa3, 0x1c, 0xc0, 0x36, 0x5e, 0x60, 0xe3, 0x16, 0x7f, 0xb6, 0x4c, 0x59, 0xca,
	0x01, 0x13, 0x93, 0x85, 0x83, 0x3f, 0xba, 0x0b, 0xcb, 0x94, 0x5b, 0x68, 0x00, 0x3d, 0xc7, 0xb5,
	0x6d, 0x6c, 0x7f, 0x92, 0xdb, 0x79, 0x41, 0xdc, 0xf9, 0xdc, 0x22, 0x44, 0xee, 0xe4, 0xc5, 0x8d,
	0x81, 0x6f, 0x5d, 0xc7, 0x92, 0x4f, 0xd4, 0x0f, 0x30, 0x2c, 0x55, 0x69, 0x1a, 0xb3, 0x75, 0x4a,
	0xd1, 0x0c, 0x7a, 0xc5, 0xc5, 0xe9, 0x44, 0x9a, 0xb6, 0x67, 0x03, 0x7d, 0xb8, 0xff, 0x4a, 0xa7,
	0x6a, 0xab, 0x97, 0x20, 0x1b, 0x41, 0x50, 0x74, 0x1c, 0xfa, 0x3d, 0xa3, 0x29, 0x47, 0xcf, 0xa1,
	0x5f, 0x5e, 0x4b, 0x8b, 0xf9, 0xbe, 0xb3, 0x03, 0xd4, 0x2b, 0x18, 0xd5, 0x26, 0xfe, 0x59, 0xd0,
	0x80, 0xb1, 0x19, 0xa6, 0x3c, 0x09, 0xfd, 0x8c, 0x53, 0x23, 0x8a, 0x9a, 0x56, 0xb4, 0xfe, 0xbe,
	0xe2, 0x3d, 0x9c, 0x11, 0xee, 0x25, 0xfc, 0x3f, 0xd4, 0x5f, 0xc0, 0x78, 0xbe, 0x4d, 0xcf, 0xbd,
	0x17, 0xf2, 0xea, 0xe6, 0x86, 0x10, 0xa8, 0x4b, 0x38, 0x3f, 0x24, 0x97, 0x82, 0x4d, 0x91, 0x79,
	0x03, 0x67, 0x1b, 0x2f, 0xe4, 0x5f, 0x92, 0x92, 0x24, 0x82, 0x33, 0xd0, 0x65, 0xf1, 0x94, 0xda,
	0xb0, 0x73, 0xba, 0xa9, 0x55, 0xfa, 0xaf, 0x36, 0xc0, 0x4e, 0x05, 0xbd, 0xde, 0xe6, 0xe5, 0x5c,
	0x2b, 0x12, 0xad, 0x55, 0x89, 0xd6, 0xac, 0x3c, 0xd1, 0x0a, 0xca, 0x17, 0x1e, 0xf8, 0xfd, 0x0e,
	0xfa, 0x5b, 0x4f, 0xd0, 0x93, 0x9c, 0x70, 0x68, 0xaa, 0x32, 0x3e, 0x40, 0xcb, 0xc9, 0x6b, 0x18,
	0x11, 0xca, 0xad, 0x1f, 0x74, 0x99, 0x71, 0xba, 0xfd, 0x19, 0x39, 0x77, 0x1f, 0x53, 0x8e, 0x3c,
	0x07, 0x5d, 0x41, 0x9f, 0x50, 0x7e, 0x17, 0x65, 0xab, 0x70, 0x8d, 0x84, 0xc8, 0xce, 0xde, 0x6a,
	0xf6, 0xe9, 0x3e, 0x5c, 0x77, 0x5d, 0x87, 0x13, 0xe1, 0xe5, 0xd1, 0x73, 0x47, 0xe5, 0xb9, 0x35,
	0xbb, 0xaf, 0xa1, 0x93, 0xff, 0x50, 0x24, 0xd6, 0x36, 0xda, 0xa9, 0x28, 0x4d, 0xad, 0x62, 0xfc,
	0x52, 0x42, 0x6f, 0xa1, 0x43, 0x38, 0x8b, 0x8f, 0x6a, 0x1e, 0xc1, 0xfd, 0xae, 0xa8, 0x5f, 0xfd,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x42, 0xd9, 0x5a, 0x82, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	AddWorker(ctx context.Context, in *AddWorkerRequest, opts ...grpc.CallOption) (*AddWorkerResponse, error)
	SetExecuteRequest(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetPlugin(ctx context.Context, in *DistributeRequest, opts ...grpc.CallOption) (*DistributeAllResponse, error)
	Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StartResponse, error)
	Wait(ctx context.Context, in *ControllerWaitRequest, opts ...grpc.CallOption) (Controller_WaitClient, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddWorker(ctx context.Context, in *AddWorkerRequest, opts ...grpc.CallOption) (*AddWorkerResponse, error) {
	out := new(AddWorkerResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/AddWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SetExecuteRequest(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.Controller/SetExecuteRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SetPlugin(ctx context.Context, in *DistributeRequest, opts ...grpc.CallOption) (*DistributeAllResponse, error) {
	out := new(DistributeAllResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/SetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Wait(ctx context.Context, in *ControllerWaitRequest, opts ...grpc.CallOption) (Controller_WaitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/pb.Controller/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_WaitClient interface {
	Recv() (*ControllerWaitResponse, error)
	grpc.ClientStream
}

type controllerWaitClient struct {
	grpc.ClientStream
}

func (x *controllerWaitClient) Recv() (*ControllerWaitResponse, error) {
	m := new(ControllerWaitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.Controller/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	AddWorker(context.Context, *AddWorkerRequest) (*AddWorkerResponse, error)
	SetExecuteRequest(context.Context, *ExecuteRequest) (*empty.Empty, error)
	SetPlugin(context.Context, *DistributeRequest) (*DistributeAllResponse, error)
	Start(context.Context, *empty.Empty) (*StartResponse, error)
	Wait(*ControllerWaitRequest, Controller_WaitServer) error
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Status(ctx context.Context, req *empty.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedControllerServer) AddWorker(ctx context.Context, req *AddWorkerRequest) (*AddWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorker not implemented")
}
func (*UnimplementedControllerServer) SetExecuteRequest(ctx context.Context, req *ExecuteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecuteRequest not implemented")
}
func (*UnimplementedControllerServer) SetPlugin(ctx context.Context, req *DistributeRequest) (*DistributeAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlugin not implemented")
}
func (*UnimplementedControllerServer) Start(ctx context.Context, req *empty.Empty) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedControllerServer) Wait(req *ControllerWaitRequest, srv Controller_WaitServer) error {
	return status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (*UnimplementedControllerServer) Stop(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/AddWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddWorker(ctx, req.(*AddWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SetExecuteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SetExecuteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/SetExecuteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SetExecuteRequest(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/SetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SetPlugin(ctx, req.(*DistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Start(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ControllerWaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Wait(m, &controllerWaitServer{stream})
}

type Controller_WaitServer interface {
	Send(*ControllerWaitResponse) error
	grpc.ServerStream
}

type controllerWaitServer struct {
	grpc.ServerStream
}

func (x *controllerWaitServer) Send(m *ControllerWaitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
		{
			MethodName: "AddWorker",
			Handler:    _Controller_AddWorker_Handler,
		},
		{
			MethodName: "SetExecuteRequest",
			Handler:    _Controller_SetExecuteRequest_Handler,
		},
		{
			MethodName: "SetPlugin",
			Handler:    _Controller_SetPlugin_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Controller_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Controller_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _Controller_Wait_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
